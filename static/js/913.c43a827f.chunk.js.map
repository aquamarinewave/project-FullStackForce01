{"version":3,"file":"static/js/913.c43a827f.chunk.js","mappings":"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","sources":["components/AuthForm/AuthFormRegister.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport { object, string, ref } from 'yup';\nimport {\n  ErrorText,\n  ContainerAuth,\n  AuthForm,\n  AuthTitle,\n  AuthField,\n  AuthLinkToLogin,\n  AuthLinkLogin,\n  AuthRegisterButton,\n  AuthShowPassword,\n  AuthShowConfirmPassword,\n  AuthFieldWrap,\n  AuthIconShowPassword,\n  AuthIconFailed,\n  AuthIconsValidation,\n  AuthIconCheck,\n  ValidPassword,\n} from './AuthForm.styled';\n\nimport authOperations from '../../redux/auth/operations';\nimport { useState } from 'react';\nimport sprite from '../../images/icons.svg';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../Loader/Loader';\nimport authSelector from 'redux/auth/authSelector';\n\nconst userRegisterSchema = object({\n  name: string().required('Name is a required field').min(2, 'Your name is too short.').max(16, 'Your name is too long.'),\n  email: string().required('Email is a required field').email('Please enter a valid email'),\n  password: string()\n    .min(6, 'Your password is too short.')\n    .max(16, 'Your password is too long.')\n    .required('Password is a required field')\n    .matches(/[0-9]/, 'Your password must have at least 1 number')\n    .matches(/[a-z]/, 'Your password must have at least 1 lowercase letter')\n    .matches(/[A-Z]/, 'Your password must have at least 1 uppercase letter'),\n  confirmPassword: string()\n    .required('Please retype your password.')\n    .oneOf([ref('password')], 'Your passwords do not match.'),\n});\n\nconst initialValues = { name: '', email: '', password: '', confirmPassword: '' };\n\nconst AuthFormRegister = props => {\n  const dispatch = useDispatch();\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const [isShowConfirmPassword, setIsShowConfirmPassword] = useState(false);\n  const isLoading = useSelector(authSelector.loadingSelector);\n\n  const handleSubmitRegister = ({ name, email, password }) => {\n    dispatch(authOperations.registrationUser({ name, email, password }));\n  };\n\n  return (\n    <>\n      {' '}\n      {isLoading ? (\n        <Loader props={{ marginTop: '20%', marginLeft: '45%' }}/>\n      ) : (\n        <ContainerAuth>\n          <AuthTitle>Registration</AuthTitle>\n          <Formik initialValues={initialValues} validationSchema={userRegisterSchema} onSubmit={handleSubmitRegister}>\n            {({ errors, touched, handleChange, handleBlur, values, handleSubmit }) => {\n              return (\n                <AuthForm onSubmit={handleSubmit}>\n                  <AuthFieldWrap>\n                    <AuthField\n                      {...props}\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder=\"Name\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.name}\n                      valid={touched.name && !errors.name}\n                      error={touched.name && errors.name}\n                    />\n\n                    {errors.name && touched.name && (\n                      <AuthIconsValidation>\n                        <AuthIconFailed width={24} height={24}>\n                          <use href={`${sprite}#icon-cross-small`}></use>\n                        </AuthIconFailed>\n                      </AuthIconsValidation>\n                    )}\n                    {!errors.name && touched.name && (\n                      <AuthIconsValidation>\n                        <AuthIconCheck width={24} height={24}>\n                          <use href={`${sprite}#icon-check`}></use>\n                        </AuthIconCheck>\n                      </AuthIconsValidation>\n                    )}\n                  </AuthFieldWrap>\n                  <ErrorMessage name=\"name\" render={message => <ErrorText>{message}</ErrorText>} />\n\n                  <AuthFieldWrap>\n                    <AuthField\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder=\"Email\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.email}\n                      valid={touched.email && !errors.email}\n                      error={touched.email && errors.email}\n                    />\n\n                    {errors.email && touched.email && (\n                      <AuthIconsValidation>\n                        <AuthIconFailed width={24} height={24}>\n                          <use href={`${sprite}#icon-cross-small`}></use>\n                        </AuthIconFailed>\n                      </AuthIconsValidation>\n                    )}\n                    {!errors.email && touched.email && (\n                      <AuthIconsValidation>\n                        <AuthIconCheck width={24} height={24}>\n                          <use href={`${sprite}#icon-check`}></use>\n                        </AuthIconCheck>\n                      </AuthIconsValidation>\n                    )}\n                  </AuthFieldWrap>\n                  <ErrorMessage name=\"email\" render={message => <ErrorText>{message}</ErrorText>} />\n\n                  <AuthFieldWrap>\n                    <AuthField\n                      type={isShowPassword ? 'text' : 'password'}\n                      name=\"password\"\n                      placeholder=\"Password\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.password}\n                      valid={touched.password && !errors.password}\n                      error={touched.password && errors.password}\n                    />\n\n                    {errors.password && touched.password && (\n                      <AuthIconsValidation>\n                        <AuthIconFailed width={24} height={24}>\n                          <use href={`${sprite}#icon-cross-small`}></use>\n                        </AuthIconFailed>\n                      </AuthIconsValidation>\n                    )}\n                    {!errors.password && touched.password && (\n                      <AuthIconsValidation>\n                        <AuthIconCheck width={24} height={24}>\n                          <use href={`${sprite}#icon-check`}></use>\n                        </AuthIconCheck>\n                      </AuthIconsValidation>\n                    )}\n\n                    {isShowPassword ? (\n                      <AuthShowPassword\n                        type=\"button\"\n                        onClick={() => setIsShowPassword(!isShowPassword)}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.password}\n                        valid={touched.password && !errors.password}\n                        error={touched.password && errors.password}\n                      >\n                        <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                          <use href={`${sprite}#icon-eye-open`}></use>\n                        </AuthIconShowPassword>\n                      </AuthShowPassword>\n                    ) : (\n                      <AuthShowPassword\n                        type=\"button\"\n                        onClick={() => setIsShowPassword(!isShowPassword)}\n                        valid={touched.password && !errors.password}\n                        error={touched.password && errors.password}\n                      >\n                        <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                          <use href={`${sprite}#icon-eye-closed`}></use>\n                        </AuthIconShowPassword>\n                      </AuthShowPassword>\n                    )}\n                  </AuthFieldWrap>\n                  {touched.password && !errors.password && !isShowPassword && (\n                    <ValidPassword>Password is secure</ValidPassword>\n                  )}\n                  <ErrorMessage name=\"password\" render={message => <ErrorText>{message}</ErrorText>} />\n\n                  <AuthFieldWrap>\n                    <AuthField\n                      type={isShowConfirmPassword ? 'text' : 'password'}\n                      name=\"confirmPassword\"\n                      placeholder=\"Confirm password\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.confirmPassword}\n                      valid={touched.confirmPassword && !errors.confirmPassword}\n                      error={touched.confirmPassword && errors.confirmPassword}\n                    />\n\n                    {errors.confirmPassword && touched.password && (\n                      <AuthIconsValidation>\n                        <AuthIconFailed width={24} height={24}>\n                          <use href={`${sprite}#icon-cross-small`}></use>\n                        </AuthIconFailed>\n                      </AuthIconsValidation>\n                    )}\n                    {!errors.confirmPassword && touched.password && (\n                      <AuthIconsValidation>\n                        <AuthIconCheck width={24} height={24}>\n                          <use href={`${sprite}#icon-check`}></use>\n                        </AuthIconCheck>\n                      </AuthIconsValidation>\n                    )}\n\n                    {isShowConfirmPassword ? (\n                      <AuthShowConfirmPassword\n                        type=\"button\"\n                        onClick={() => setIsShowConfirmPassword(!isShowConfirmPassword)}\n                        valid={touched.password && !errors.password}\n                        error={touched.password && errors.password}\n                      >\n                        <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                          <use href={`${sprite}#icon-eye-open`}></use>\n                        </AuthIconShowPassword>\n                      </AuthShowConfirmPassword>\n                    ) : (\n                      <AuthShowConfirmPassword\n                        type=\"button\"\n                        onClick={() => setIsShowConfirmPassword(!isShowConfirmPassword)}\n                        valid={touched.password && !errors.password}\n                        error={touched.password && errors.password}\n                      >\n                        <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                          <use href={`${sprite}#icon-eye-closed`}></use>\n                        </AuthIconShowPassword>\n                      </AuthShowConfirmPassword>\n                    )}\n                  </AuthFieldWrap>\n                  <ErrorMessage name=\"confirmPassword\" render={message => <ErrorText>{message}</ErrorText>} />\n                  <AuthRegisterButton type=\"submit\">Registration</AuthRegisterButton>\n\n                  <AuthLinkToLogin>\n                    Already have an account? <AuthLinkLogin to=\"/login\">Login</AuthLinkLogin>\n                  </AuthLinkToLogin>\n                </AuthForm>\n              );\n            }}\n          </Formik>\n        </ContainerAuth>\n      )}\n    </>\n  );\n};\n\nexport default AuthFormRegister;\n","import AuthFormRegister from 'components/AuthForm/AuthFormRegister';\n\nfunction RegisterPage() {\n  return <AuthFormRegister />;\n}\n\nexport default RegisterPage;\n"],"names":["userRegisterSchema","object","name","string","required","min","max","email","password","matches","confirmPassword","oneOf","ref","initialValues","props","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isShowPassword","setIsShowPassword","_useState3","_useState4","isShowConfirmPassword","setIsShowConfirmPassword","isLoading","useSelector","authSelector","_jsxs","_Fragment","children","_jsx","Loader","marginTop","marginLeft","ContainerAuth","AuthTitle","Formik","validationSchema","onSubmit","_ref","authOperations","_ref2","errors","touched","handleChange","handleBlur","values","handleSubmit","AuthForm","AuthFieldWrap","AuthField","_objectSpread","type","placeholder","onChange","onBlur","value","valid","error","AuthIconsValidation","AuthIconFailed","width","height","href","concat","sprite","AuthIconCheck","ErrorMessage","render","message","ErrorText","AuthShowPassword","onClick","AuthIconShowPassword","ValidPassword","AuthShowConfirmPassword","AuthRegisterButton","AuthLinkToLogin","AuthLinkLogin","to","AuthFormRegister"],"sourceRoot":""}