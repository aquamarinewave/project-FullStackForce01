{"version":3,"file":"static/js/106.3afa17ac.chunk.js","mappings":"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","sources":["components/AuthForm/AuthFormLogin.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  ErrorText,\n  ContainerAuth,\n  AuthForm,\n  AuthTitle,\n  AuthField,\n  AuthFieldWrap,\n  AuthLinkToLogin,\n  AuthLinkLogin,\n  AuthLoginButton,\n  AuthShowPassword,\n  AuthIconShowPassword,\n  AuthIconsValidation,\n  AuthIconFailed,\n  AuthIconCheck,\n  ValidPassword,\n} from './AuthForm.styled';\n\nimport authOperations from '../../redux/auth/operations';\nimport { useState } from 'react';\nimport sprite from '../../images/icons.svg';\nimport authSelector from 'redux/auth/authSelector';\nimport Loader from '../Loader/Loader';\n\nconst userLoginSchema = object({\n  email: string().required('Email is a required field').email('Please enter a valid email'),\n  password: string()\n    .min(6, 'Your password is too short.')\n    .max(16, 'Your password is too long.')\n    .required('Password is a required field')\n    .matches(/[0-9]/, 'Your password must have at least 1 number')\n    .matches(/[a-z]/, 'Your password must have at least 1 lowercase letter')\n    .matches(/[A-Z]/, 'Your password must have at least 1 uppercase letter'),\n});\n\nconst initialValues = { name: '', email: '', password: '', confirmPassword: '' };\n\nconst AuthFormLogin = props => {\n  const dispatch = useDispatch();\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const error = useSelector(authSelector.userErrorSelector);\n  const isLoading = useSelector(authSelector.loadingSelector);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const { email, password } = values;\n\n    dispatch(authOperations.loginUser({ email, password }));\n    if (!error === null) {\n      resetForm();\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ContainerAuth>\n          <AuthTitle>Login</AuthTitle>\n          <Formik initialValues={initialValues} validationSchema={userLoginSchema} onSubmit={handleSubmit}>\n            {({ errors, touched, handleChange, handleBlur, values, isValid, isSubmitting }) => (\n              <AuthForm>\n                <AuthFieldWrap>\n                  <AuthField\n                    {...props}\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                    valid={touched.email && !errors.email}\n                    error={touched.email && errors.email}\n                    autoCapitalize=\"off\"\n                    autoCorrect=\"off\"\n                    autoComplete=\"email\"\n                  />\n\n                  {errors.email && touched.email && (\n                    <AuthIconsValidation type=\"button\">\n                      <AuthIconFailed width={24} height={24}>\n                        <use href={`${sprite}#icon-cross-small`}></use>\n                      </AuthIconFailed>\n                    </AuthIconsValidation>\n                  )}\n                  {!errors.email && touched.email && (\n                    <AuthIconsValidation type=\"button\">\n                      <AuthIconCheck width={24} height={24}>\n                        <use href={`${sprite}#icon-check`}></use>\n                      </AuthIconCheck>\n                    </AuthIconsValidation>\n                  )}\n                </AuthFieldWrap>\n                <ErrorMessage name=\"email\" render={message => <ErrorText>{message}</ErrorText>} />\n\n                <AuthFieldWrap>\n                  <AuthField\n                    type={isShowPassword ? 'text' : 'password'}\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  />\n\n                  {errors.password && touched.password && (\n                    <AuthIconsValidation type=\"button\">\n                      <AuthIconFailed width={24} height={24}>\n                        <use href={`${sprite}#icon-cross-small`}></use>\n                      </AuthIconFailed>\n                    </AuthIconsValidation>\n                  )}\n                  {!errors.password && touched.password && (\n                    <AuthIconsValidation type=\"button\">\n                      <AuthIconCheck width={24} height={24}>\n                        <use href={`${sprite}#icon-check`}></use>\n                      </AuthIconCheck>\n                    </AuthIconsValidation>\n                  )}\n\n                  {isShowPassword ? (\n                    <AuthShowPassword\n                      type=\"button\"\n                      onClick={() => setIsShowPassword(!isShowPassword)}\n                      value={values.password}\n                      valid={touched.password && !errors.password}\n                      error={touched.password && errors.password}\n                    >\n                      <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                        <use href={`${sprite}#icon-eye-open`}></use>\n                      </AuthIconShowPassword>\n                    </AuthShowPassword>\n                  ) : (\n                    <AuthShowPassword\n                      type=\"button\"\n                      onClick={() => setIsShowPassword(!isShowPassword)}\n                      value={values.password}\n                      valid={touched.password && !errors.password}\n                      error={touched.password && errors.password}\n                    >\n                      <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                        <use href={`${sprite}#icon-eye-closed`}></use>\n                      </AuthIconShowPassword>\n                    </AuthShowPassword>\n                  )}\n                </AuthFieldWrap>\n                {touched.password && !errors.password && !isShowPassword && (\n                  <ValidPassword>Password is secure</ValidPassword>\n                )}\n                {errors.password && touched.password && (\n                  <ErrorMessage name=\"password\" render={message => <ErrorText>{message}</ErrorText>} />\n                )}\n                <AuthLoginButton type=\"submit\">Login</AuthLoginButton>\n                <AuthLinkToLogin>\n                  Don't have an account? <AuthLinkLogin to=\"/register\">Registration</AuthLinkLogin>\n                </AuthLinkToLogin>\n              </AuthForm>\n            )}\n          </Formik>\n        </ContainerAuth>\n      )}\n    </>\n  );\n};\n\nexport default AuthFormLogin;\n","import AuthFormLogin from 'components/AuthForm/AuthFormLogin';\n\nfunction LoginPage() {\n  return <AuthFormLogin />;\n}\n\nexport default LoginPage;\n"],"names":["userLoginSchema","object","email","string","required","password","min","max","matches","initialValues","name","confirmPassword","props","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isShowPassword","setIsShowPassword","error","useSelector","authSelector","isLoading","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","wrap","_context","prev","next","authOperations","stop","_x","_x2","apply","arguments","_jsx","_Fragment","children","Loader","_jsxs","ContainerAuth","AuthTitle","Formik","validationSchema","onSubmit","_ref3","errors","touched","handleChange","handleBlur","isValid","isSubmitting","AuthForm","AuthFieldWrap","AuthField","_objectSpread","type","placeholder","onChange","onBlur","value","valid","autoCapitalize","autoCorrect","autoComplete","AuthIconsValidation","AuthIconFailed","width","height","href","concat","sprite","AuthIconCheck","ErrorMessage","render","message","ErrorText","AuthShowPassword","onClick","AuthIconShowPassword","ValidPassword","AuthLoginButton","AuthLinkToLogin","AuthLinkLogin","to","AuthFormLogin"],"sourceRoot":""}