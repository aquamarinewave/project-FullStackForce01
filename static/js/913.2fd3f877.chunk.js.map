{"version":3,"file":"static/js/913.2fd3f877.chunk.js","mappings":"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","sources":["components/AuthForm/AuthFormRegister.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport { object, string, ref } from 'yup';\nimport { useDispatch } from 'react-redux';\nimport {\n  ErrorText,\n  ContainerAuth,\n  AuthForm,\n  AuthTitle,\n  AuthField,\n  AuthLinkToLogin,\n  AuthLinkLogin,\n  AuthRegisterButton,\n  AuthShowPassword,\n  AuthShowConfirmPassword,\n  AuthFieldWrap,\n  AuthIconShowPassword,\n} from './AuthForm.styled';\n\nimport authOperations from '../../redux/auth/operations';\nimport { useState } from 'react';\nimport sprite from '../../images/icons.svg';\n\nconst userRegisterSchema = object({\n  name: string().required().min(2, 'Your name is too short.').max(16, 'Your name is too long.'),\n  email: string().required().email('Please enter a valid email'),\n  password: string()\n    .min(6, 'Your password is too short.')\n    .max(16, 'Your password is too long.')\n    .required()\n    .matches(/[0-9]/, 'Your password must have at least 1 number')\n    .matches(/[a-z]/, 'Your password must have at least 1 lowercase letter')\n    .matches(/[A-Z]/, 'Your password must have at least 1 uppercase letter'),\n  confirmPassword: string()\n    .required('Please retype your password.')\n    .oneOf([ref('password')], 'Your passwords do not match.'),\n});\n\nconst initialValues = { name: '', email: '', password: '', confirmPassword: '' };\n\nconst AuthFormRegister = props => {\n  const dispatch = useDispatch();\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const [isShowConfirmPassword, setIsShowConfirmPassword] = useState(false);\n  // const [isShowModal, setIsShowModal] = useState(true)\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, email, password } = values;\n    dispatch(authOperations.registrationUser({ name, email, password }));\n    //  ModalCongrats()\n    resetForm();\n  };\n\n  return (\n    <ContainerAuth>\n      <AuthTitle>Registration</AuthTitle>\n      <Formik initialValues={initialValues} validationSchema={userRegisterSchema} onSubmit={handleSubmit}>\n        {({ errors }) => (\n          <AuthForm>\n            <AuthFieldWrap>\n              <AuthField\n                {...props}\n                margin-top={errors.name && '2px'}\n                border={errors.name && '1px solid red'}\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Name\"\n              />\n              <ErrorMessage name=\"name\" render={message => <ErrorText>{message}</ErrorText>} />\n            </AuthFieldWrap>\n\n            <AuthFieldWrap>\n              <AuthField border={errors.email && '1px solid red'} type=\"email\" name=\"email\" placeholder=\"Email\" />\n              <ErrorMessage name=\"email\" render={message => <ErrorText>{message}</ErrorText>} />\n            </AuthFieldWrap>\n            <AuthFieldWrap>\n              <AuthField\n                margin-top={errors.password && '2px'}\n                border={errors.password && '1px solid red'}\n                type={isShowPassword ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Password\"\n              />\n              <AuthShowPassword type=\"button\" onClick={() => setIsShowPassword(!isShowPassword)}>\n                {isShowPassword ? (\n                  <AuthIconShowPassword width={24} height={24}>\n                  <use href={`${sprite}#icon-eye-open`}></use>\n                </AuthIconShowPassword>\n                ) : (\n                  <AuthIconShowPassword width={24} height={24}>\n                    <use href={`${sprite}#icon-eye-closed`}></use>\n                  </AuthIconShowPassword>\n                  \n                )}\n              </AuthShowPassword>\n\n              <ErrorMessage name=\"password\" render={message => <ErrorText>{message}</ErrorText>} />\n            </AuthFieldWrap>\n\n            <AuthFieldWrap>\n              <AuthField\n                margin={errors.password && '2px'}\n                border={errors.confirmPassword && '1px solid red'}\n                type={isShowConfirmPassword ? 'text' : 'password'}\n                name=\"confirmPassword\"\n                placeholder=\"Confirm password\"\n              />\n              <AuthShowConfirmPassword type=\"button\" onClick={() => setIsShowConfirmPassword(!isShowConfirmPassword)}>\n                {isShowConfirmPassword ? (\n                  <AuthIconShowPassword width={24} height={24}>\n                  <use href={`${sprite}#icon-eye-open`}></use>\n                </AuthIconShowPassword>\n                ) : (\n                  <AuthIconShowPassword width={24} height={24}>\n                  <use href={`${sprite}#icon-eye-closed`}></use>\n                </AuthIconShowPassword>\n                )}\n              </AuthShowConfirmPassword>\n\n              <ErrorMessage name=\"confirmPassword\" render={message => <ErrorText>{message}</ErrorText>} />\n            </AuthFieldWrap>\n            <AuthRegisterButton type=\"submit\">Registration</AuthRegisterButton>\n            <AuthLinkToLogin>\n              Don't have an account? <AuthLinkLogin to=\"/login\">Login</AuthLinkLogin>\n            </AuthLinkToLogin>\n          </AuthForm>\n        )}\n      </Formik>\n    </ContainerAuth>\n  );\n};\n\nexport default AuthFormRegister;\n","import AuthFormRegister from 'components/AuthForm/AuthFormRegister';\n\nfunction RegisterPage() {\n  return <AuthFormRegister />;\n}\n\nexport default RegisterPage;\n"],"names":["userRegisterSchema","object","name","string","required","min","max","email","password","matches","confirmPassword","oneOf","ref","initialValues","props","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isShowPassword","setIsShowPassword","_useState3","_useState4","isShowConfirmPassword","setIsShowConfirmPassword","_jsxs","ContainerAuth","children","_jsx","AuthTitle","Formik","validationSchema","onSubmit","values","_ref","resetForm","authOperations","_ref2","errors","AuthForm","AuthFieldWrap","AuthField","_objectSpread","border","type","placeholder","ErrorMessage","render","message","ErrorText","AuthShowPassword","onClick","AuthIconShowPassword","width","height","href","concat","sprite","margin","AuthShowConfirmPassword","AuthRegisterButton","AuthLinkToLogin","AuthLinkLogin","to","AuthFormRegister"],"sourceRoot":""}