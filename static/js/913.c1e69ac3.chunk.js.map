{"version":3,"file":"static/js/913.c1e69ac3.chunk.js","mappings":"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","sources":["components/AuthForm/AuthFormRegister.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport { object, string, ref } from 'yup';\nimport { useDispatch } from 'react-redux';\nimport {\n  ErrorText,\n  ContainerAuth,\n  AuthForm,\n  AuthTitle,\n  AuthField,\n  AuthLinkToLogin,\n  AuthLinkLogin,\n  AuthRegisterButton,\n  AuthShowPassword,\n  AuthShowConfirmPassword,\n  AuthFieldWrap,\n  AuthIconShowPassword,\n  AuthIconFailed,\n  AuthIconsValidation,\n  AuthIconCheck,\n} from './AuthForm.styled';\n\nimport authOperations from '../../redux/auth/operations';\nimport { useState } from 'react';\nimport sprite from '../../images/icons.svg';\n\nconst userRegisterSchema = object({\n  name: string().required().min(2, 'Your name is too short.').max(16, 'Your name is too long.'),\n  email: string().required().email('Please enter a valid email'),\n  password: string()\n    .min(6, 'Your password is too short.')\n    .max(16, 'Your password is too long.')\n    .required()\n    .matches(/[0-9]/, 'Your password must have at least 1 number')\n    .matches(/[a-z]/, 'Your password must have at least 1 lowercase letter')\n    .matches(/[A-Z]/, 'Your password must have at least 1 uppercase letter'),\n  confirmPassword: string()\n    .required('Please retype your password.')\n    .oneOf([ref('password')], 'Your passwords do not match.'),\n});\n\nconst initialValues = { name: '', email: '', password: '', confirmPassword: '' };\n\nconst AuthFormRegister = props => {\n  const dispatch = useDispatch();\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const [isShowConfirmPassword, setIsShowConfirmPassword] = useState(false);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, email, password } = values;\n    dispatch(authOperations.registrationUser({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <ContainerAuth>\n      <AuthTitle>Registration</AuthTitle>\n      <Formik initialValues={initialValues} validationSchema={userRegisterSchema} onSubmit={handleSubmit}>\n        {({ errors, touched, handleChange, handleBlur, values, isSubmitting, isValid }) => {\n          return (\n            <AuthForm>\n              <AuthFieldWrap>\n                <AuthField\n                  {...props}\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  valid={touched.name && !errors.name}\n                  error={touched.name && errors.name}\n                />\n\n                {errors.name && touched.name && (\n                  <AuthIconsValidation>\n                    <AuthIconFailed width={24} height={24}>\n                      <use href={`${sprite}#icon-cross-small`}></use>\n                    </AuthIconFailed>\n                  </AuthIconsValidation>\n                )}\n                {!errors.name && touched.name && (\n                  <AuthIconsValidation>\n                    <AuthIconCheck width={24} height={24}>\n                      <use href={`${sprite}#icon-check`}></use>\n                    </AuthIconCheck>\n                  </AuthIconsValidation>\n                )}\n                <ErrorMessage name=\"name\" render={message => <ErrorText>{message}</ErrorText>} />\n              </AuthFieldWrap>\n\n              <AuthFieldWrap>\n                <AuthField\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  valid={touched.email && !errors.email}\n                  error={touched.email && errors.email}\n                />\n\n                {errors.email && touched.email && (\n                  <AuthIconsValidation>\n                    <AuthIconFailed width={24} height={24}>\n                      <use href={`${sprite}#icon-cross-small`}></use>\n                    </AuthIconFailed>\n                  </AuthIconsValidation>\n                )}\n                {!errors.email && touched.email && (\n                  <AuthIconsValidation>\n                    <AuthIconCheck width={24} height={24}>\n                      <use href={`${sprite}#icon-check`}></use>\n                    </AuthIconCheck>\n                  </AuthIconsValidation>\n                )}\n\n                {errors.email && touched.email && (\n                  <ErrorMessage name=\"email\" render={message => <ErrorText>{message}</ErrorText>} />\n                )}\n              </AuthFieldWrap>\n\n              <AuthFieldWrap>\n                <AuthField\n                  type={isShowPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  valid={touched.password && !errors.password}\n                  error={touched.password && errors.password}\n                />\n\n                {errors.password && touched.password && (\n                  <AuthIconsValidation>\n                    <AuthIconFailed width={24} height={24}>\n                      <use href={`${sprite}#icon-cross-small`}></use>\n                    </AuthIconFailed>\n                  </AuthIconsValidation>\n                )}\n                {!errors.password && touched.password && (\n                  <AuthIconsValidation>\n                    <AuthIconCheck width={24} height={24}>\n                      <use href={`${sprite}#icon-check`}></use>\n                    </AuthIconCheck>\n                  </AuthIconsValidation>\n                )}\n\n                {isShowPassword ? (\n                  <AuthShowPassword\n                    type=\"button\"\n                    onClick={() => setIsShowPassword(!isShowPassword)}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  >\n                    <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                      <use href={`${sprite}#icon-eye-closed`}></use>\n                    </AuthIconShowPassword>\n                  </AuthShowPassword>\n                ) : (\n                  <AuthShowPassword\n                    type=\"button\"\n                    onClick={() => setIsShowPassword(!isShowPassword)}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  >\n                    <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                      <use href={`${sprite}#icon-eye-open`}></use>\n                    </AuthIconShowPassword>\n                  </AuthShowPassword>\n                )}\n\n                <ErrorMessage name=\"password\" render={message => <ErrorText>{message}</ErrorText>} />\n              </AuthFieldWrap>\n\n              <AuthFieldWrap>\n                <AuthField\n                  type={isShowConfirmPassword ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"Confirm password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.confirmPassword}\n                  valid={touched.confirmPassword && !errors.confirmPassword}\n                  error={touched.confirmPassword && errors.confirmPassword}\n                />\n\n                {errors.confirmPassword && touched.password && (\n                  <AuthIconsValidation>\n                    <AuthIconFailed width={24} height={24}>\n                      <use href={`${sprite}#icon-cross-small`}></use>\n                    </AuthIconFailed>\n                  </AuthIconsValidation>\n                )}\n                {!errors.confirmPassword && touched.password && (\n                  <AuthIconsValidation>\n                    <AuthIconCheck width={24} height={24}>\n                      <use href={`${sprite}#icon-check`}></use>\n                    </AuthIconCheck>\n                  </AuthIconsValidation>\n                )}\n\n                {isShowConfirmPassword ? (\n                  <AuthShowConfirmPassword\n                    type=\"button\"\n                    onClick={() => setIsShowConfirmPassword(!isShowConfirmPassword)}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  >\n                    <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                      <use href={`${sprite}#icon-eye-closed`}></use>\n                    </AuthIconShowPassword>\n                  </AuthShowConfirmPassword>\n                ) : (\n                  <AuthShowConfirmPassword\n                    type=\"button\"\n                    onClick={() => setIsShowConfirmPassword(!isShowConfirmPassword)}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  >\n                    <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                      <use href={`${sprite}#icon-eye-open`}></use>\n                    </AuthIconShowPassword>\n                  </AuthShowConfirmPassword>\n                )}\n\n                <ErrorMessage name=\"confirmPassword\" render={message => <ErrorText>{message}</ErrorText>} />\n              </AuthFieldWrap>\n              <AuthRegisterButton disabled={!isValid || isSubmitting} type=\"submit\">\n                Registration\n              </AuthRegisterButton>\n              <AuthLinkToLogin>\n                Already have an account? <AuthLinkLogin to=\"/login\">Login</AuthLinkLogin>\n              </AuthLinkToLogin>\n            </AuthForm>\n          );\n        }}\n      </Formik>\n    </ContainerAuth>\n  );\n};\n\nexport default AuthFormRegister;","import AuthFormRegister from 'components/AuthForm/AuthFormRegister';\n\nfunction RegisterPage() {\n  return <AuthFormRegister />;\n}\n\nexport default RegisterPage;\n"],"names":["userRegisterSchema","object","name","string","required","min","max","email","password","matches","confirmPassword","oneOf","ref","initialValues","props","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isShowPassword","setIsShowPassword","_useState3","_useState4","isShowConfirmPassword","setIsShowConfirmPassword","_jsxs","ContainerAuth","children","_jsx","AuthTitle","Formik","validationSchema","onSubmit","values","_ref","resetForm","authOperations","_ref2","errors","touched","handleChange","handleBlur","isSubmitting","isValid","AuthForm","AuthFieldWrap","AuthField","_objectSpread","type","placeholder","onChange","onBlur","value","valid","error","AuthIconsValidation","AuthIconFailed","width","height","href","concat","sprite","AuthIconCheck","ErrorMessage","render","message","ErrorText","AuthShowPassword","onClick","AuthIconShowPassword","AuthShowConfirmPassword","AuthRegisterButton","disabled","AuthLinkToLogin","AuthLinkLogin","to","AuthFormRegister"],"sourceRoot":""}