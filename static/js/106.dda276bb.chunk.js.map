{"version":3,"file":"static/js/106.dda276bb.chunk.js","mappings":"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","sources":["components/AuthForm/AuthFormLogin.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  ErrorText,\n  ContainerAuth,\n  AuthForm,\n  AuthTitle,\n  AuthField,\n  AuthFieldWrap,\n  AuthLinkToLogin,\n  AuthLinkLogin,\n  AuthLoginButton,\n  AuthShowPassword,\n  AuthIconShowPassword,\n  AuthIconsValidation,\n  AuthIconFailed,\n  AuthIconCheck,\n  ValidPassword,\n} from './AuthForm.styled';\n\nimport authOperations from '../../redux/auth/operations';\nimport { useState } from 'react';\nimport sprite from '../../images/icons.svg';\nimport authSelector from 'redux/auth/authSelector';\n\nconst userLoginSchema = object({\n  email: string().required().email('Please enter a valid email'),\n  password: string()\n    .min(6, 'Your password is too short.')\n    .max(16, 'Your password is too long.')\n    .required()\n    .matches(/[0-9]/, 'Your password must have at least 1 number')\n    .matches(/[a-z]/, 'Your password must have at least 1 lowercase letter')\n    .matches(/[A-Z]/, 'Your password must have at least 1 uppercase letter'),\n});\n\nconst initialValues = { name: '', email: '', password: '', confirmPassword: '' };\n\nconst AuthFormLogin = props => {\n  const dispatch = useDispatch();\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const error = useSelector(authSelector.userErrorSelector);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const { email, password } = values;\n\n    dispatch(authOperations.loginUser({ email, password }));\n    if (!error === null) {\n      resetForm();\n    }\n  };\n\n  return (\n    <ContainerAuth>\n      <AuthTitle>Login</AuthTitle>\n      <Formik initialValues={initialValues} validationSchema={userLoginSchema} onSubmit={handleSubmit}>\n        {({ errors, touched, handleChange, handleBlur, values, isValid, isSubmitting }) => (\n          <AuthForm>\n            <AuthFieldWrap>\n              <AuthField\n                {...props}\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n                valid={touched.email && !errors.email}\n                error={touched.email && errors.email}\n                autoCapitalize=\"off\"\n                autoCorrect=\"off\"\n                autoComplete=\"email\"\n              />\n\n              {errors.email && touched.email && (\n                <AuthIconsValidation type=\"button\">\n                  <AuthIconFailed width={24} height={24}>\n                    <use href={`${sprite}#icon-cross-small`}></use>\n                  </AuthIconFailed>\n                </AuthIconsValidation>\n              )}\n              {!errors.email && touched.email && (\n                <AuthIconsValidation type=\"button\">\n                  <AuthIconCheck width={24} height={24}>\n                    <use href={`${sprite}#icon-check`}></use>\n                  </AuthIconCheck>\n                </AuthIconsValidation>\n              )}\n            </AuthFieldWrap>\n            <ErrorMessage name=\"email\" render={message => <ErrorText>{message}</ErrorText>} />\n\n            <AuthFieldWrap>\n              <AuthField\n                type={isShowPassword ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Password\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.password}\n                valid={touched.password && !errors.password}\n                error={touched.password && errors.password}\n              />\n\n              {errors.password && touched.password && (\n                <AuthIconsValidation type=\"button\">\n                  <AuthIconFailed width={24} height={24}>\n                    <use href={`${sprite}#icon-cross-small`}></use>\n                  </AuthIconFailed>\n                </AuthIconsValidation>\n              )}\n              {!errors.password && touched.password && (\n                <AuthIconsValidation type=\"button\">\n                  <AuthIconCheck width={24} height={24}>\n                    <use href={`${sprite}#icon-check`}></use>\n                  </AuthIconCheck>\n                </AuthIconsValidation>\n              )}\n\n              {isShowPassword ? (\n                <AuthShowPassword\n                  type=\"button\"\n                  onClick={() => setIsShowPassword(!isShowPassword)}\n                  value={values.password}\n                  valid={touched.password && !errors.password}\n                  error={touched.password && errors.password}\n                >\n                  <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                    <use href={`${sprite}#icon-eye-open`}></use>\n                  </AuthIconShowPassword>\n                </AuthShowPassword>\n              ) : (\n                <AuthShowPassword\n                  type=\"button\"\n                  onClick={() => setIsShowPassword(!isShowPassword)}\n                  value={values.password}\n                  valid={touched.password && !errors.password}\n                  error={touched.password && errors.password}\n                >\n                  <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                    <use href={`${sprite}#icon-eye-closed`}></use>\n                  </AuthIconShowPassword>\n                </AuthShowPassword>\n              )}\n            </AuthFieldWrap>\n            {touched.password && !errors.password && !isShowPassword && (\n              <ValidPassword>Password is secure</ValidPassword>\n            )}\n            {errors.password && touched.password && (\n              <ErrorMessage name=\"password\" render={message => <ErrorText>{message}</ErrorText>} />\n            )}\n            <AuthLoginButton type=\"submit\">Login</AuthLoginButton>\n            <AuthLinkToLogin>\n              Don't have an account? <AuthLinkLogin to=\"/register\">Registration</AuthLinkLogin>\n            </AuthLinkToLogin>\n          </AuthForm>\n        )}\n      </Formik>\n    </ContainerAuth>\n  );\n};\n\nexport default AuthFormLogin;\n","import AuthFormLogin from 'components/AuthForm/AuthFormLogin';\n\nfunction LoginPage() {\n  return <AuthFormLogin />;\n}\n\nexport default LoginPage;\n"],"names":["userLoginSchema","object","email","string","required","password","min","max","matches","initialValues","name","confirmPassword","props","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isShowPassword","setIsShowPassword","error","useSelector","authSelector","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","wrap","_context","prev","next","authOperations","stop","_x","_x2","apply","arguments","_jsxs","ContainerAuth","children","_jsx","AuthTitle","Formik","validationSchema","onSubmit","_ref3","errors","touched","handleChange","handleBlur","isValid","isSubmitting","AuthForm","AuthFieldWrap","AuthField","_objectSpread","type","placeholder","onChange","onBlur","value","valid","autoCapitalize","autoCorrect","autoComplete","AuthIconsValidation","AuthIconFailed","width","height","href","concat","sprite","AuthIconCheck","ErrorMessage","render","message","ErrorText","AuthShowPassword","onClick","AuthIconShowPassword","ValidPassword","AuthLoginButton","AuthLinkToLogin","AuthLinkLogin","to","AuthFormLogin"],"sourceRoot":""}