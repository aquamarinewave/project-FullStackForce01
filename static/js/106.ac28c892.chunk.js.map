{"version":3,"file":"static/js/106.ac28c892.chunk.js","mappings":"iRAqBMA,GAAkBC,EAAAA,EAAAA,IAAO,CAC7BC,OAAOC,EAAAA,EAAAA,MAASC,WAAWF,MAAM,8BACjCG,UAAUF,EAAAA,EAAAA,MACPG,IAAI,EAAG,+BACPC,IAAI,GAAI,8BACRH,WACAI,QAAQ,QAAS,6CACjBA,QAAQ,QAAS,uDACjBA,QAAQ,QAAS,yDAGhBC,EAAgB,CAAEC,KAAM,GAAIR,MAAO,GAAIG,SAAU,GAAIM,gBAAiB,IAoD5E,EAlDsB,SAAAC,GACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAA4CC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GASxC,OACEI,EAAAA,EAAAA,MAACC,EAAAA,GAAa,CAAAC,SAAA,EACZC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAAAF,SAAC,WACXC,EAAAA,EAAAA,KAACE,EAAAA,OAAM,CAACjB,cAAeA,EAAekB,iBAAkB3B,EAAiB4B,SAVxD,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UACtB7B,EAAoB2B,EAApB3B,MAAOG,EAAawB,EAAbxB,SACfQ,EAASmB,EAAAA,EAAAA,UAAyB,CAAE9B,MAAAA,EAAOG,SAAAA,KAC3C4B,MAAM,SACNF,GACF,EAKoGR,SAC7F,SAAAW,GAAA,IAAGC,EAAMD,EAANC,OAAM,OACRd,EAAAA,EAAAA,MAACe,EAAAA,GAAQ,CAAAb,SAAA,EACPC,EAAAA,EAAAA,KAACa,EAAAA,GAAS,CAACC,OAAQH,EAAOjC,OAAS,gBAAiBqC,KAAK,QAAQ7B,KAAK,QAAQ8B,YAAY,WAC1FhB,EAAAA,EAAAA,KAACiB,EAAAA,aAAY,CAAC/B,KAAK,QAAQgC,OAAQ,SAAAC,GAAO,OAAInB,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CAAArB,SAAEoB,GAAoB,KAC9EtB,EAAAA,EAAAA,MAACwB,EAAAA,GAAa,CAAAtB,SAAA,EACZC,EAAAA,EAAAA,KAACa,EAAAA,GAAS,CACRC,OAAQH,EAAO9B,UAAY,gBAC3BkC,KAAMpB,EAAiB,OAAS,WAChCT,KAAK,WACL8B,YAAY,cAEdhB,EAAAA,EAAAA,KAACsB,EAAAA,GAAgB,CAACP,KAAK,SAASQ,QAAS,kBAAM3B,GAAmBD,EAAe,EAACI,SAC/EJ,GACCK,EAAAA,EAAAA,KAACwB,EAAAA,GAAoB,CAACC,MAAO,GAAIC,OAAQ,GAAG3B,UAC1CC,EAAAA,EAAAA,KAAA,OAAK2B,KAAI,GAAAC,OAAKC,EAAAA,EAAM,yBAGtB7B,EAAAA,EAAAA,KAACwB,EAAAA,GAAoB,CAACC,MAAO,GAAIC,OAAQ,GAAG3B,UAC1CC,EAAAA,EAAAA,KAAA,OAAK2B,KAAI,GAAAC,OAAKC,EAAAA,EAAM,4BAK5B7B,EAAAA,EAAAA,KAACiB,EAAAA,aAAY,CAAC/B,KAAK,WAAWgC,OAAQ,SAAAC,GAAO,OAAInB,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CAAArB,SAAEoB,GAAoB,KACjFnB,EAAAA,EAAAA,KAAC8B,EAAAA,GAAe,CAACf,KAAK,SAAQhB,SAAC,WAC/BF,EAAAA,EAAAA,MAACkC,EAAAA,GAAe,CAAAhC,SAAA,CAAC,2BACQC,EAAAA,EAAAA,KAACgC,EAAAA,GAAa,CAACC,GAAG,YAAWlC,SAAC,sBAE9C,MAKrB,EC5EA,MAJA,WACE,OAAOC,EAAAA,EAAAA,KAACkC,EAAa,GACvB,C","sources":["components/AuthForm/AuthFormLogin.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { useDispatch } from 'react-redux';\nimport {\n  ErrorText,\n  ContainerAuth,\n  AuthForm,\n  AuthTitle,\n  AuthField,\n  AuthFieldWrap,\n  AuthLinkToLogin,\n  AuthLinkLogin,\n  AuthLoginButton,\n  AuthShowPassword,\n  AuthIconShowPassword,\n} from './AuthForm.styled';\n\nimport authOperations from '../../redux/auth/operations';\nimport { useState } from 'react';\nimport sprite from '../../images/icons.svg';\n\nconst userLoginSchema = object({\n  email: string().required().email('Please enter a valid email'),\n  password: string()\n    .min(6, 'Your password is too short.')\n    .max(16, 'Your password is too long.')\n    .required()\n    .matches(/[0-9]/, 'Your password must have at least 1 number')\n    .matches(/[a-z]/, 'Your password must have at least 1 lowercase letter')\n    .matches(/[A-Z]/, 'Your password must have at least 1 uppercase letter'),\n});\n\nconst initialValues = { name: '', email: '', password: '', confirmPassword: '' };\n\nconst AuthFormLogin = props => {\n  const dispatch = useDispatch();\n  const [isShowPassword, setIsShowPassword] = useState(false);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    dispatch(authOperations.loginUser({ email, password }));\n    alert('Oppps');\n    resetForm();\n  };\n\n  return (\n    <ContainerAuth>\n      <AuthTitle>Login</AuthTitle>\n      <Formik initialValues={initialValues} validationSchema={userLoginSchema} onSubmit={handleSubmit}>\n        {({ errors }) => (\n          <AuthForm>\n            <AuthField border={errors.email && '1px solid red'} type=\"email\" name=\"email\" placeholder=\"Email\" />\n            <ErrorMessage name=\"email\" render={message => <ErrorText>{message}</ErrorText>} />\n            <AuthFieldWrap>\n              <AuthField\n                border={errors.password && '1px solid red'}\n                type={isShowPassword ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Password\"\n              />\n              <AuthShowPassword type=\"button\" onClick={() => setIsShowPassword(!isShowPassword)}>\n                {isShowPassword ? (\n                  <AuthIconShowPassword width={24} height={24}>\n                    <use href={`${sprite}#icon-eye-closed`}></use>\n                  </AuthIconShowPassword>\n                ) : (\n                  <AuthIconShowPassword width={24} height={24}>\n                    <use href={`${sprite}#icon-eye-open`}></use>\n                  </AuthIconShowPassword>\n                )}\n              </AuthShowPassword>\n            </AuthFieldWrap>\n            <ErrorMessage name=\"password\" render={message => <ErrorText>{message}</ErrorText>} />\n            <AuthLoginButton type=\"submit\">Login</AuthLoginButton>\n            <AuthLinkToLogin>\n              Don't have an account? <AuthLinkLogin to=\"/register\">Registration</AuthLinkLogin>\n            </AuthLinkToLogin>\n          </AuthForm>\n        )}\n      </Formik>\n    </ContainerAuth>\n  );\n};\n\nexport default AuthFormLogin;\n","import AuthFormLogin from 'components/AuthForm/AuthFormLogin';\n\nfunction LoginPage() {\n  return <AuthFormLogin />;\n}\n\nexport default LoginPage;\n"],"names":["userLoginSchema","object","email","string","required","password","min","max","matches","initialValues","name","confirmPassword","props","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isShowPassword","setIsShowPassword","_jsxs","ContainerAuth","children","_jsx","AuthTitle","Formik","validationSchema","onSubmit","values","_ref","resetForm","authOperations","alert","_ref2","errors","AuthForm","AuthField","border","type","placeholder","ErrorMessage","render","message","ErrorText","AuthFieldWrap","AuthShowPassword","onClick","AuthIconShowPassword","width","height","href","concat","sprite","AuthLoginButton","AuthLinkToLogin","AuthLinkLogin","to","AuthFormLogin"],"sourceRoot":""}