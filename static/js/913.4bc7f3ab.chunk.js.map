{"version":3,"file":"static/js/913.4bc7f3ab.chunk.js","mappings":"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","sources":["components/AuthForm/AuthFormRegister.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { Formik, ErrorMessage } from 'formik';\nimport { object, string, ref } from 'yup';\nimport {\n  ErrorText,\n  ContainerAuth,\n  AuthForm,\n  AuthTitle,\n  AuthField,\n  AuthLinkToLogin,\n  AuthLinkLogin,\n  AuthRegisterButton,\n  AuthShowPassword,\n  AuthShowConfirmPassword,\n  AuthFieldWrap,\n  AuthIconShowPassword,\n  AuthIconFailed,\n  AuthIconsValidation,\n  AuthIconCheck,\n  ValidPassword,\n} from './AuthForm.styled';\n\nimport authOperations from '../../redux/auth/operations';\nimport { useState } from 'react';\nimport sprite from '../../images/icons.svg';\nimport { useDispatch } from 'react-redux';\n\nconst userRegisterSchema = object({\n  name: string().required().min(2, 'Your name is too short.').max(16, 'Your name is too long.'),\n  email: string().required().email('Please enter a valid email'),\n  password: string()\n    .min(6, 'Your password is too short.')\n    .max(16, 'Your password is too long.')\n    .required()\n    .matches(/[0-9]/, 'Your password must have at least 1 number')\n    .matches(/[a-z]/, 'Your password must have at least 1 lowercase letter')\n    .matches(/[A-Z]/, 'Your password must have at least 1 uppercase letter'),\n  confirmPassword: string()\n    .required('Please retype your password.')\n    .oneOf([ref('password')], 'Your passwords do not match.'),\n});\n\nconst initialValues = { name: '', email: '', password: '', confirmPassword: '' };\n\nconst AuthFormRegister = props => {\n  const dispatch = useDispatch();\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const [isShowConfirmPassword, setIsShowConfirmPassword] = useState(false);\n\n  const handleSubmitRegister = ({ name, email, password }) => {\n    dispatch(authOperations.registrationUser({ name, email, password }));\n  };\n\n  return (\n    <ContainerAuth>\n      <AuthTitle>Registration</AuthTitle>\n      <Formik initialValues={initialValues} validationSchema={userRegisterSchema} onSubmit={handleSubmitRegister}>\n        {({ errors, touched, handleChange, handleBlur, values, handleSubmit }) => {\n          return (\n            <AuthForm onSubmit={handleSubmit}>\n              <AuthFieldWrap>\n                <AuthField\n                  {...props}\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  valid={touched.name && !errors.name}\n                  error={touched.name && errors.name}\n                />\n\n                {errors.name && touched.name && (\n                  <AuthIconsValidation>\n                    <AuthIconFailed width={24} height={24}>\n                      <use href={`${sprite}#icon-cross-small`}></use>\n                    </AuthIconFailed>\n                  </AuthIconsValidation>\n                )}\n                {!errors.name && touched.name && (\n                  <AuthIconsValidation>\n                    <AuthIconCheck width={24} height={24}>\n                      <use href={`${sprite}#icon-check`}></use>\n                    </AuthIconCheck>\n                  </AuthIconsValidation>\n                )}\n              </AuthFieldWrap>\n              <ErrorMessage name=\"name\" render={message => <ErrorText>{message}</ErrorText>} />\n\n              <AuthFieldWrap>\n                <AuthField\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  valid={touched.email && !errors.email}\n                  error={touched.email && errors.email}\n                />\n\n                {errors.email && touched.email && (\n                  <AuthIconsValidation>\n                    <AuthIconFailed width={24} height={24}>\n                      <use href={`${sprite}#icon-cross-small`}></use>\n                    </AuthIconFailed>\n                  </AuthIconsValidation>\n                )}\n                {!errors.email && touched.email && (\n                  <AuthIconsValidation>\n                    <AuthIconCheck width={24} height={24}>\n                      <use href={`${sprite}#icon-check`}></use>\n                    </AuthIconCheck>\n                  </AuthIconsValidation>\n                )}\n              </AuthFieldWrap>\n              <ErrorMessage name=\"email\" render={message => <ErrorText>{message}</ErrorText>} />\n\n              <AuthFieldWrap>\n                <AuthField\n                  type={isShowPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  valid={touched.password && !errors.password}\n                  error={touched.password && errors.password}\n                />\n\n                {errors.password && touched.password && (\n                  <AuthIconsValidation>\n                    <AuthIconFailed width={24} height={24}>\n                      <use href={`${sprite}#icon-cross-small`}></use>\n                    </AuthIconFailed>\n                  </AuthIconsValidation>\n                )}\n                {!errors.password && touched.password && (\n                  <AuthIconsValidation>\n                    <AuthIconCheck width={24} height={24}>\n                      <use href={`${sprite}#icon-check`}></use>\n                    </AuthIconCheck>\n                  </AuthIconsValidation>\n                )}\n\n                {isShowPassword ? (\n                  <AuthShowPassword\n                    type=\"button\"\n                    onClick={() => setIsShowPassword(!isShowPassword)}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  >\n                    <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                      <use href={`${sprite}#icon-eye-open`}></use>\n                    </AuthIconShowPassword>\n                  </AuthShowPassword>\n                ) : (\n                  <AuthShowPassword\n                    type=\"button\"\n                    onClick={() => setIsShowPassword(!isShowPassword)}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  >\n                    <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                      <use href={`${sprite}#icon-eye-closed`}></use>\n                    </AuthIconShowPassword>\n                  </AuthShowPassword>\n                )}\n              </AuthFieldWrap>\n              {touched.password && !errors.password && !isShowPassword && (\n                <ValidPassword>Password is secure</ValidPassword>\n              )}\n              <ErrorMessage name=\"password\" render={message => <ErrorText>{message}</ErrorText>} />\n\n              <AuthFieldWrap>\n                <AuthField\n                  type={isShowConfirmPassword ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"Confirm password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.confirmPassword}\n                  valid={touched.confirmPassword && !errors.confirmPassword}\n                  error={touched.confirmPassword && errors.confirmPassword}\n                />\n\n                {errors.confirmPassword && touched.password && (\n                  <AuthIconsValidation>\n                    <AuthIconFailed width={24} height={24}>\n                      <use href={`${sprite}#icon-cross-small`}></use>\n                    </AuthIconFailed>\n                  </AuthIconsValidation>\n                )}\n                {!errors.confirmPassword && touched.password && (\n                  <AuthIconsValidation>\n                    <AuthIconCheck width={24} height={24}>\n                      <use href={`${sprite}#icon-check`}></use>\n                    </AuthIconCheck>\n                  </AuthIconsValidation>\n                )}\n\n                {isShowConfirmPassword ? (\n                  <AuthShowConfirmPassword\n                    type=\"button\"\n                    onClick={() => setIsShowConfirmPassword(!isShowConfirmPassword)}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  >\n                    <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                      <use href={`${sprite}#icon-eye-open`}></use>\n                    </AuthIconShowPassword>\n                  </AuthShowConfirmPassword>\n                ) : (\n                  <AuthShowConfirmPassword\n                    type=\"button\"\n                    onClick={() => setIsShowConfirmPassword(!isShowConfirmPassword)}\n                    valid={touched.password && !errors.password}\n                    error={touched.password && errors.password}\n                  >\n                    <AuthIconShowPassword width={24} height={24} valid={touched.password && !errors.password}>\n                      <use href={`${sprite}#icon-eye-closed`}></use>\n                    </AuthIconShowPassword>\n                  </AuthShowConfirmPassword>\n                )}\n              </AuthFieldWrap>\n              <ErrorMessage name=\"confirmPassword\" render={message => <ErrorText>{message}</ErrorText>} />\n              <AuthRegisterButton type=\"submit\">Registration</AuthRegisterButton>\n              <AuthLinkToLogin>\n                Already have an account? <AuthLinkLogin to=\"/login\">Login</AuthLinkLogin>\n              </AuthLinkToLogin>\n            </AuthForm>\n          );\n        }}\n      </Formik>\n    </ContainerAuth>\n  );\n};\n\nexport default AuthFormRegister;\n","import AuthFormRegister from 'components/AuthForm/AuthFormRegister';\n\nfunction RegisterPage() {\n  return <AuthFormRegister />;\n}\n\nexport default RegisterPage;\n"],"names":["userRegisterSchema","object","name","string","required","min","max","email","password","matches","confirmPassword","oneOf","ref","initialValues","props","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isShowPassword","setIsShowPassword","_useState3","_useState4","isShowConfirmPassword","setIsShowConfirmPassword","_jsxs","ContainerAuth","children","_jsx","AuthTitle","Formik","validationSchema","onSubmit","_ref","authOperations","_ref2","errors","touched","handleChange","handleBlur","values","handleSubmit","AuthForm","AuthFieldWrap","AuthField","_objectSpread","type","placeholder","onChange","onBlur","value","valid","error","AuthIconsValidation","AuthIconFailed","width","height","href","concat","sprite","AuthIconCheck","ErrorMessage","render","message","ErrorText","AuthShowPassword","onClick","AuthIconShowPassword","ValidPassword","AuthShowConfirmPassword","AuthRegisterButton","AuthLinkToLogin","AuthLinkLogin","to","AuthFormRegister"],"sourceRoot":""}